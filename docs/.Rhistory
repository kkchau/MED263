# dataDir <- "/home/rstudio/data"
# workDir <- "/home/rstudio/work"
dataDir <- "../data"
workDir <- "../../test"
# setwd("/home/rstudio/work")
# install.packages(c('matrixStats', 'Hmisc', 'splines',
#                    'foreach', 'doParallel', 'fastcluster',
#                    'dynamicTreeCut', 'survival', 'viridisLite',
#                    'enrichR', 'tidyverse')
# source("https://bioconductor.org/biocLite.R")
# biocLite(c('GO.db', 'preprocessCore', 'imput', 'WGCNA', 'SummarizedExperiment'))
library(WGCNA)
library(SummarizedExperiment)
library(enrichR)
library(ggplot2)
library(gridExtra)
library(dplyr)
### Optional:
# Enable parallel processing for computationally intensive tasks
# (soft thresholding, topological overlap, etc.)
# Go to your Docker settings (Settings -> Advanced) and check how many CPUs
# you would like to dedicate to the process
# Then, uncomment and run the following lines
library(doParallel)
allowWGCNAThreads()
# ggplot standard theming
theme.standard <- theme(text=element_text(size=15),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
axis.line=element_line())
# url <- "http://www.brainspan.org/api/v2/well_known_file_download/267666525"
# utils::download.file(url, destfile="/home/rstudio/brainSpan.zip", mode='wb')
# utils::unzip("brainSpan.zip", exdir="/home/rstudio/brainSpan")
# file.remove("brainSpan.zip")
expr <- read.csv(paste(dataDir, "brainSpan/expression_matrix.csv", sep = "/"),
header=FALSE)[, -1]
coldata <- read.csv(paste(dataDir, "/brainSpan/columns_metadata.csv", sep = "/"))[, -1]
rowdata <- read.csv(paste(dataDir, "/brainSpan/rows_metadata.csv", sep = "/"))[, -1]
row.names(expr) <- rowdata$ensembl_gene_id
colnames(expr) <- as.character(apply(coldata, 1,
FUN=function(x) paste(x[["donor_name"]],
x[["structure_acronym"]],
sep="."
)
)
)
se.expr <- SummarizedExperiment(assays=list(rpkm=as.matrix(expr)),
rowData=rowdata,
colData=coldata
)
se.expr
hist(assays(se.expr)$rpkm, xlim=c(0, 10), breaks=100000)
se.expr.filt <- se.expr[apply(assays(se.expr)$rpkm >= 5, 1, sum) >= 0.9*ncol(se.expr),]
dim(se.expr.filt)
object.size(se.expr.filt)
pwr <- c(seq(2, 8), seq(9, 21, by=3))
soft.thresh <- pickSoftThreshold(t(assays(se.expr.filt)$rpkm),
powerVector=pwr,
networkType="signed",
verbose=5
)
sftplt <- (ggplot(soft.thresh$fitIndices,
aes(x=soft.thresh$fitIndices$Power,
y=(-sign(soft.thresh$fitIndices$slope)
* soft.thresh$fitIndices$SFT.R.sq)
)
)
+ geom_text(label=soft.thresh$fitIndices$Power)
+ scale_y_continuous(breaks=c(-0.5, 0, 0.5, 0.85, 1),
labels=c('-0.5', '0', '0.5', '0.85', '1')
)
+ geom_line(y=0.85, colour='red')
+ labs(x="Power",
y="R^2 Scale-Free Topology Fit",
title="Scale-Free Topology Fit"
)
+ theme.standard
)
conplt <- (ggplot(soft.thresh$fitIndices,
aes(x=soft.thresh$fitIndices$Power,
y=soft.thresh$fitIndices$mean.k)
)
+ geom_text(label=soft.thresh$fitIndices$Power)
+ labs(x="Power",
y="Mean Connectivity",
title="Mean Connectivity per Power Level"
)
+ theme.standard
)
grid.arrange(sftplt, conplt, ncol=2)
adj <- adjacency(t(assays(se.expr.filt)$rpkm), power=soft.thresh$powerEstimate)
tom <- TOMsimilarity(adj)
distom <- 1 - tom
geneTree <- hclust(as.dist(distom), method='average')
plot(geneTree, xlab="", sub="", main="Topological Overlap Clustering", labels=FALSE)
modSize <- 20   # minimum module size
dynMods <- cutreeDynamic(dendro=geneTree, distM=distom, minClusterSize=modSize)
table(dynMods)
dynCol <- labels2colors(dynMods)
plotDendroAndColors(dendro=geneTree, colors=dynCol, dendroLabels=FALSE,
main="Dynamically Cut TOM Dendrogram", groupLabels="Dynamic Colors"
)
mergeThresh <- 1 - 0.8
MEs <- moduleEigengenes(t(assays(se.expr.filt)$rpkm), colors=dynCol)$eigengenes
disMEs <- 1 - cor(MEs)
MEtree <- hclust(as.dist(disMEs), method='average')
plot(MEtree, main="Module Eigengene Clustering", xlab="Modules", sub="")
abline(h=mergeThresh, col='red')
mergeEigen <- mergeCloseModules(t(assays(se.expr.filt)$rpkm), dynCol, cutHeight=mergeThresh)
mergedCol <- mergeEigen$colors
mergedMEs <- mergeEigen$newMEs
table(mergedCol)
plotDendroAndColors(dendro=geneTree, colors=cbind(dynCol, mergedCol),
groupLabels=c("Dynamic Colors", "Merged Colors"),
dendroLabels=FALSE, main="Merged Module Dendrogram"
)
rowData(se.expr.filt)$module <- mergedCol
# Create directory for modules
dir.create(paste(workDir, "modules", sep = "/"), showWarnings=F)
for (clr in unique(rowData(se.expr.filt)$module)) {
fname <- paste0(paste(workDir, "modules/", sep = "/"), clr, ".module")
write.table(row.names(se.expr.filt)[rowData(se.expr.filt)$module==clr],
file=fname, sep='\n', quote=F, row.names=F, col.names=F)
}
# Create enrichment directory
dir.create(paste(workDir, "enrichment", sep = "/"), showWarnings=F)
db <- 'GO_Biological_Process_2017'
# We can ignore the grey module since those genes are just unassigned nodes
for (fmod in list.files(paste(workDir, "modules", sep = "/"),
full.names=TRUE,
pattern="*.module")
) {
if (fmod == paste(workDir, "modules/grey.module", sep = "/")) { next }
# Get module color
ofilename <- paste(paste(workDir, "enrichment/", sep = "/"),
unlist(strsplit(fmod, "/"))[[6]],
".enrich",
sep=""
)
mod.members <- scan(fmod, what=character())
mem.as.sym <- rowData(se.expr.filt)$gene_symbol[rowData(se.expr.filt)$ensembl_gene_id
%in% mod.members]
this.enrichment <- enrichr(as.character(mem.as.sym), databases=db)
printEnrich(this.enrichment, columns=c(1, 2, 3, 4, 7, 9), file=ofilename)
}
fmod
# Create enrichment directory
dir.create(paste(workDir, "enrichment", sep = "/"), showWarnings=F)
db <- 'GO_Biological_Process_2017'
# We can ignore the grey module since those genes are just unassigned nodes
for (fmod in list.files(paste(workDir, "modules", sep = "/"),
full.names=TRUE,
pattern="*.module")
) {
if (fmod == paste(workDir, "modules/grey.module", sep = "/")) { next }
# Get module color
len.of.name <- length(unlist(strsplit(fmod, "/")))
ofilename <- paste(paste(workDir, "enrichment", sep = "/"),
unlist(strsplit(fmod, "/"))[[len.of.name]],
sep = "/")
mod.members <- scan(fmod, what=character())
mem.as.sym <- rowData(se.expr.filt)$gene_symbol[rowData(se.expr.filt)$ensembl_gene_id
%in% mod.members]
this.enrichment <- enrichr(as.character(mem.as.sym), databases=db)
printEnrich(this.enrichment, columns=c(1, 2, 3, 4, 7, 9), file=ofilename)
}
dark.green.enrich <- read.csv(file = paste(workDir, "enrichment/darkgreen.module.enrich", sep = "/"),
skip = 1,
header = FALSE,
sep = '\t')
dg.labels <- dark.green.enrich$V1[order(dark.green.enrich$V4)]
dark.green.enrich$V4 <- -log10(dark.green.enrich$V4)
# adjusted pvalue is col 4
ggplot(dark.green.enrich, aes(x = reorder(V1, V4), y = V4)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "", y = "-log(P-Value)",
title = "GO Enrichment of DarkGreen Module") +
theme.standard
sessionInfo()
